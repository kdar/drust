extern crate pbr;
extern crate hyper;

use hyper::client::Client;
use hyper::header::{AcceptRanges, RangeUnit};
use pbr::{ProgressBar, Units};
use std::thread;
use std::fs::File;
use std::io::{Read, Write};

macro_rules! try_s {
  ($expr:expr) => (match $expr {
    std::result::Result::Ok(val) => val,
    std::result::Result::Err(err) => {
      return std::result::Result::Err(err.to_string());
    }
  })
}

fn check_accept_range() -> Result<(), String> {
  let client = Client::new();
  let mut res =
    try_s!(client.get("https://cdn.kernel.org/pub/linux/kernel/v4.x/testing/linux-4.7-rc6.tar.xz")
      .send());

  if res.headers.has::<AcceptRanges>() {
    if res.headers.get::<AcceptRanges>().unwrap().0.contains(&RangeUnit::Bytes) {
      return Ok(());
    }
  }

  Err("".)
}

fn download(pb: &mut ProgressBar) -> Result<(), String> {
  let mut f = try_s!(File::create("testfile.mp4"));

  let client = Client::new();
  let mut res =
    try_s!(client.get("https://cdn.kernel.org/pub/linux/kernel/v4.x/testing/linux-4.7-rc6.tar.xz")
      .send());

  let mut buf = [0u8; 1024 * 1024];
  loop {
    let n = try_s!(res.read(&mut buf));
    if n == 0 {
      break;
    } else {
      pb.add(n as u64);
      try_s!(f.write_all(&mut buf[..n]));
    }
  }

  Ok(())
}

fn main() {
  println!("{:?}", check_accept_range());
  return;

  let mut pb = ProgressBar::new(90390924);
  pb.set_units(Units::Bytes);
  pb.format("╢=> ╟");
  download(&mut pb);
  pb.finish_print("done!");
}
